<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lhq.superboot.mapper.PayLogMapper">
    <resultMap id="BaseResultMap" type="com.lhq.superboot.domain.PayLog">
        <id column="pay_id" jdbcType="VARCHAR" property="payId"/>
        <result column="out_trade_no" jdbcType="VARCHAR" property="outTradeNo"/>
        <result column="order_no" jdbcType="VARCHAR" property="orderNo"/>
        <result column="pay_price" jdbcType="BIGINT" property="payPrice"/>
        <result column="user_id" jdbcType="VARCHAR" property="userId"/>
        <result column="pay_time" jdbcType="TIMESTAMP" property="payTime"/>
        <result column="pay_type" jdbcType="VARCHAR" property="payType"/>
        <result column="bank_type" jdbcType="VARCHAR" property="bankType"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime"/>
        <result column="is_valid" jdbcType="INTEGER" property="isValid"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        pay_id, out_trade_no, order_no, pay_price, user_id, pay_time, pay_type, bank_type,
        remarks, create_time, modify_time, is_valid
    </sql>
    <select id="selectByExample" parameterType="com.lhq.superboot.domain.PayLogExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from bus_user_pay_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from bus_user_pay_log
        where pay_id = #{payId,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from bus_user_pay_log
        where pay_id = #{payId,jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByExample" parameterType="com.lhq.superboot.domain.PayLogExample">
        delete from bus_user_pay_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.lhq.superboot.domain.PayLog">
        <selectKey keyProperty="payId" order="BEFORE" resultType="java.lang.String">
            select REPLACE(uuid(),'-','')
        </selectKey>
        insert into bus_user_pay_log (pay_id, out_trade_no, order_no,
        pay_price, user_id, pay_time,
        pay_type, bank_type, remarks,
        create_time, modify_time, is_valid
        )
        values (#{payId,jdbcType=VARCHAR}, #{outTradeNo,jdbcType=VARCHAR}, #{orderNo,jdbcType=VARCHAR},
        #{payPrice,jdbcType=BIGINT}, #{userId,jdbcType=VARCHAR}, #{payTime,jdbcType=TIMESTAMP},
        #{payType,jdbcType=VARCHAR}, #{bankType,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR},
        #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP}, #{isValid,jdbcType=INTEGER}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.lhq.superboot.domain.PayLog">
        <selectKey keyProperty="payId" order="BEFORE" resultType="java.lang.String">
            select REPLACE(uuid(),'-','')
        </selectKey>
        insert into bus_user_pay_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            pay_id,
            <if test="outTradeNo != null">
                out_trade_no,
            </if>
            <if test="orderNo != null">
                order_no,
            </if>
            <if test="payPrice != null">
                pay_price,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="payTime != null">
                pay_time,
            </if>
            <if test="payType != null">
                pay_type,
            </if>
            <if test="bankType != null">
                bank_type,
            </if>
            <if test="remarks != null">
                remarks,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
            <if test="isValid != null">
                is_valid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{payId,jdbcType=VARCHAR},
            <if test="outTradeNo != null">
                #{outTradeNo,jdbcType=VARCHAR},
            </if>
            <if test="orderNo != null">
                #{orderNo,jdbcType=VARCHAR},
            </if>
            <if test="payPrice != null">
                #{payPrice,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=VARCHAR},
            </if>
            <if test="payTime != null">
                #{payTime,jdbcType=TIMESTAMP},
            </if>
            <if test="payType != null">
                #{payType,jdbcType=VARCHAR},
            </if>
            <if test="bankType != null">
                #{bankType,jdbcType=VARCHAR},
            </if>
            <if test="remarks != null">
                #{remarks,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isValid != null">
                #{isValid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.lhq.superboot.domain.PayLogExample" resultType="java.lang.Long">
        select count(*) from bus_user_pay_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update bus_user_pay_log
        <set>
            <if test="record.payId != null">
                pay_id = #{record.payId,jdbcType=VARCHAR},
            </if>
            <if test="record.outTradeNo != null">
                out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
            </if>
            <if test="record.orderNo != null">
                order_no = #{record.orderNo,jdbcType=VARCHAR},
            </if>
            <if test="record.payPrice != null">
                pay_price = #{record.payPrice,jdbcType=BIGINT},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=VARCHAR},
            </if>
            <if test="record.payTime != null">
                pay_time = #{record.payTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.payType != null">
                pay_type = #{record.payType,jdbcType=VARCHAR},
            </if>
            <if test="record.bankType != null">
                bank_type = #{record.bankType,jdbcType=VARCHAR},
            </if>
            <if test="record.remarks != null">
                remarks = #{record.remarks,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.modifyTime != null">
                modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.isValid != null">
                is_valid = #{record.isValid,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update bus_user_pay_log
        set pay_id = #{record.payId,jdbcType=VARCHAR},
        out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
        order_no = #{record.orderNo,jdbcType=VARCHAR},
        pay_price = #{record.payPrice,jdbcType=BIGINT},
        user_id = #{record.userId,jdbcType=VARCHAR},
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
        pay_type = #{record.payType,jdbcType=VARCHAR},
        bank_type = #{record.bankType,jdbcType=VARCHAR},
        remarks = #{record.remarks,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
        is_valid = #{record.isValid,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.lhq.superboot.domain.PayLog">
        update bus_user_pay_log
        <set>
            <if test="outTradeNo != null">
                out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
            </if>
            <if test="orderNo != null">
                order_no = #{orderNo,jdbcType=VARCHAR},
            </if>
            <if test="payPrice != null">
                pay_price = #{payPrice,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="payTime != null">
                pay_time = #{payTime,jdbcType=TIMESTAMP},
            </if>
            <if test="payType != null">
                pay_type = #{payType,jdbcType=VARCHAR},
            </if>
            <if test="bankType != null">
                bank_type = #{bankType,jdbcType=VARCHAR},
            </if>
            <if test="remarks != null">
                remarks = #{remarks,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isValid != null">
                is_valid = #{isValid,jdbcType=INTEGER},
            </if>
        </set>
        where pay_id = #{payId,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.lhq.superboot.domain.PayLog">
        update bus_user_pay_log
        set out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
        order_no = #{orderNo,jdbcType=VARCHAR},
        pay_price = #{payPrice,jdbcType=BIGINT},
        user_id = #{userId,jdbcType=VARCHAR},
        pay_time = #{payTime,jdbcType=TIMESTAMP},
        pay_type = #{payType,jdbcType=VARCHAR},
        bank_type = #{bankType,jdbcType=VARCHAR},
        remarks = #{remarks,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
        is_valid = #{isValid,jdbcType=INTEGER}
        where pay_id = #{payId,jdbcType=VARCHAR}
    </update>
</mapper>